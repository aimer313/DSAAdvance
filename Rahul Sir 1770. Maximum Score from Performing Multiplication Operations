// Dp Recurr
class Solution1 {
public:
    // int m,n;
    int solve(vector<int> nums, vector<int> mul , int op , int l , int r) {
        if(op == mul.size()) return 0;
        int left = nums[l]*mul[op] + solve(nums,mul,op+1,l+1,r);
        int right = nums[r]*mul[op] + solve(nums,mul,op+1,l,r-1);
        
        return max(left,right);
    }
    int maximumScore(vector<int>& nums, vector<int>& multipliers) {
        int m = multipliers.size();
        int n = nums.size();
        
        return solve(nums,multipliers,0,0,n-1);
    }
};



class Solution2 {
public:
    int m,n;
    // r = n-1 - (op-l)
    int solve(vector<int> nums, vector<int> mul , int op , int l) {
        if(op == mul.size()) return 0;
        int left = nums[l]*mul[op] + solve(nums,mul,op+1,l+1);
        int right = nums[(n-1) - (op-l)]*mul[op] + solve(nums,mul,op+1,l);
        
        return max(left,right);
    }
    int maximumScore(vector<int>& nums, vector<int>& multipliers) {
        m = multipliers.size();
        n = nums.size();
        
        return solve(nums,multipliers,0,0);
    }
};

// Dp Memoize
class Solution3 {
public:
    
    // r = n-1 - (op-l)
    int solve(const vector<int>& nums,const vector<int>& mul , int op , int l,int m,vector<vector<int>>& dp) {
        if(op >= m) return 0;
        if(dp[op][l] != -1) return dp[op][l];
        int left = mul[op]*nums[l] + solve(nums,mul,op+1,l+1,m,dp);
        int right = mul[op]*nums[(nums.size()-1) - (op-l)] + solve(nums,mul,op+1,l,m,dp);
        
        return dp[op][l] = max(left,right);
    }
    int maximumScore(vector<int>& nums, vector<int>& multipliers) {
        int m = multipliers.size();
        int n = nums.size();
        vector<vector<int>> dp(m , vector<int>(m,-1));
        return solve(nums,multipliers,0,0,m,dp);
    }
};


// Dp Table
class Solution {
public:
    
    // r = n-1 - (op-l)
    int solve(const vector<int>& nums,const vector<int>& mul , int op , int l,int m,vector<vector<int>>& dp) {
        if(op >= m) return 0;
        if(dp[op][l] != -1) return dp[op][l];
        int left = mul[op]*nums[l] + solve(nums,mul,op+1,l+1,m,dp);
        int right = mul[op]*nums[(nums.size()-1) - (op-l)] + solve(nums,mul,op+1,l,m,dp);
        
        return dp[op][l] = max(left,right);
    }
    int maximumScore(vector<int>& nums, vector<int>& mul) {
        int m = mul.size();
        int n = nums.size();
        vector<vector<int>> dp(m+1 , vector<int>(m+1,0));
        for(int i = 0 ; i<m ; i++) dp[m-1][i] = 0;
        
        for(int op = m-1 ; op>=0 ; op--) {
            for(int l = op ; l>=0 ; l--) {
                int left = mul[op]*nums[l] + dp[op+1][l+1];
                int right = mul[op]*nums[(nums.size()-1) - (op-l)] + dp[op+1][l];
                
                dp[op][l] = max(left , right);
            }
        }
        return dp[0][0];
    }
};
