class Solution1 {
public:
    // with space connecting with unbounded knapsack
    int knapsack(vector<int>& wt , int W , int n) {
        
        if(n == 0 && W == 0) return 0;
        
        if(n == 0) {
            return 99999; // W is not Zero... 
        }
        
        if(W == 0) {
            return 0; // 0 number of ways & n >= 1 
        }
        
        if(wt[n-1] > W) return knapsack(wt , W , n-1);
        
        return min(1+knapsack(wt , W - wt[n-1] , n) , knapsack(wt , W , n-1));
        
        
    }
    int numSquares(int n) {
        vector<int> arr;
        int num = 1;
        
        
        while(num * num <= n) {
            int square = num * num;
            num += 1;
            arr.push_back(square);
        }
        
        return knapsack(arr , n , arr.size());
    }
};




class Solution {
public:
    // with space connecting with unbounded knapsack
    vector<vector<int>> dp;
    int knapsack(vector<int>& wt , int W , int n) {
        
        if(n == 0 && W == 0) return 0;
        
        if(n == 0) {
            return 99999; // W is not Zero... 
        }
        
        if(W == 0) {
            return 0; // 0 number of ways & n >= 1 
        }
        if(dp[n][W] != -1) return dp[n][W]; 
        
        if(wt[n-1] > W) return dp[n][W] = knapsack(wt , W , n-1);
        
        return dp[n][W] = min(1+knapsack(wt , W - wt[n-1] , n) , knapsack(wt , W , n-1));
        
        
    }
    int numSquares(int n) {
        vector<int> arr;
        int num = 1;
        
        dp.resize(arr.size()+1 , vector<int>(n+1 , -1));
        while(num * num <= n) {
            int square = num * num;
            num += 1;
            arr.push_back(square);
        }
        dp.resize(arr.size()+1 , vector<int>(n+1 , -1));
        return knapsack(arr , n , arr.size());
    }
};
